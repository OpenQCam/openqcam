cmake_minimum_required(VERSION 2.6)
PROJECT(common)


#generate version.h
# Get the current working branch
EXECUTE_PROCESS(
  COMMAND git rev-parse --abbrev-ref HEAD
  WORKING_DIRECTORY ${CRTMPSERVER_SOURCES_ROOT}
  OUTPUT_VARIABLE GIT_BRANCH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Get the latest abbreviated commit hash of the working branch
EXECUTE_PROCESS(
  COMMAND git log -1 --format=%h
  WORKING_DIRECTORY ${CRTMPSERVER_SOURCES_ROOT}
  OUTPUT_VARIABLE GIT_COMMIT_HASH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

EXECUTE_PROCESS(
    COMMAND git describe --long
    WORKING_DIRECTORY ${CRTMPSERVER_SOURCES_ROOT}
    OUTPUT_VARIABLE GIT_APPLICATION_REVISION
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

#ADD_DEFINITIONS("-DGIT_COMMIT_HASH=${GIT_COMMIT_HASH}")
#ADD_DEFINITIONS("-DGIT_BRANCH=${GIT_BRANCH}")


CONFIGURE_FILE(
  ${CRTMPSERVER_SOURCES_ROOT}/common/include/version.h.in
  ${CRTMPSERVER_SOURCES_ROOT}/common/include/version.h
)

#make the list with all the source files
FILE(GLOB_RECURSE SOURCES "${CRTMPSERVER_SOURCES_ROOT}/common/src/*.cpp" )


#prepare the include directories
INCLUDE_DIRECTORIES(
  ${TINYXML_INCLUDE_PATH}
  ${OPENSSL_INCLUDE_PATH}
  ${LUA_INCLUDE_PATH}
  ${CRTMPSERVER_SOURCES_ROOT}/common/include
)

#create the library
ADD_LIBRARY(${PROJECT_NAME} ${LIB_TYPE} ${SOURCES})
ADD_PRECOMPILED_HEADER(${PROJECT_NAME} "${CRTMPSERVER_SOURCES_ROOT}/common/include/common.h")
IF(${LIB_TYPE} MATCHES "SHARED")
  TARGET_LINK_LIBRARIES(
    ${PROJECT_NAME}
    ${LUA_LIBRARY_PATH}
    ${TINYXML_LIBRARY_PATH}
    ${OPENSSL_LIBRARY_PATH}
    ${CRYPTO_LIBRARY_PATH}
    ${Z_LIBRARY_PATH}
  )
  INSTALL(TARGETS ${PROJECT_NAME} LIBRARY DESTINATION ${CRTMPSERVER_ROOT})
ENDIF(${LIB_TYPE} MATCHES "SHARED")

