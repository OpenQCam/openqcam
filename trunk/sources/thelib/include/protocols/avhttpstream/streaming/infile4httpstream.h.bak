// ==================================================================
// // This confidential and proprietary software may be used only as
// // authorized by a licensing agreement from Quanta Computer Inc.
// //
// //            (C) COPYRIGHT Quanta Computer Inc. 
// //                   ALL RIGHTS RESERVED
// //
// // ==================================================================
// // ------------------------------------------------------------------
// // Date    : 
// // Version : 
// // Author  : Tim Hsieh (tim.hsieh@quantatw.com)
// // ------------------------------------------------------------------
// // Purpose : 
// // ======================================================================
//

#ifdef HAS_PROTOCOL_AVHTTPSTREAM
#ifndef _INFILE4HTTPSTREAM_H
#define	_INFILE4HTTPSTREAM_H

#include "streaming/baseinfilestream.h"

class InboundAVHTTPStreamProtocol;
class StreamsManager;

class DLLEXP InFile4HTTPStream
: public BaseInFileStream {
private:
	IOBuffer _metadataBuffer;
	string _metadataName;
	Variant _metadataParameters;
	Variant _tempVariant;
protected:
	Variant _completeMetadata;
	uint32_t _chunkSize;
public:
	InFile4HTTPStream(InboundAVHTTPStreamProtocol *pProtocol, StreamsManager *pStreamsManager, 
    uint64_t type, string name);
	virtual ~InFile4HTTPStream();

	virtual bool Initialize(int32_t clientSideBufferLength, bool hasTimer);

	virtual bool FeedData(uint8_t *pData, uint32_t dataLength,
			uint32_t processedLength, uint32_t totalLength,
			double absoluteTimestamp, bool isAudio);

	virtual bool IsCompatibleWithType(uint64_t type);

	uint32_t GetChunkSize();

	static InFile4HTTPStream *GetInstance(InboundAVHTTPStreamProtocol *pRTMPProtocol,
			StreamsManager *pStreamsManager, Variant &metadata);

	void SetCompleteMetadata(Variant &completeMetadata);
	Variant GetCompleteMetadata();
	virtual void SignalOutStreamAttached(BaseOutStream *pOutStream);
	virtual void SignalOutStreamDetached(BaseOutStream *pOutStream);

	virtual bool BuildFrame(FileClass *pFile, MediaFrame &mediaFrame,
			IOBuffer &buffer);
	virtual bool FeedMetaData(FileClass *pFile, MediaFrame &mediaFrame);


	bool StreamCompleted();

	/*!
	  @brief Returns the stream capabilities. Specifically, codec and codec related info
	 */
	virtual StreamCapabilities * GetCapabilities();

	/*!
		@brief Extracts the complete metadata from partial metadata
		@param metaData - the partial metadata containing at least the media file name
	 */
	static bool ResolveCompleteMetadata(Variant &metaData);

	/*!
		@brief This will initialize the stream internally.
		@param clientSideBufferLength - the client side buffer length expressed in seconds
	 */
	virtual bool Initialize(int32_t clientSideBufferLength, bool hasTimer);

	/*!
		@brief Called when a play command was issued
		@param absoluteTimestamp - the timestamp where we want to seek before start the feeding process
	 */
	virtual bool SignalPlay(double &absoluteTimestamp, double &length);

	/*!
		@brief Called when a pasue command was issued
	 */
	virtual bool SignalPause();

	/*!
		@brief Called when a resume command was issued
	 */
	virtual bool SignalResume();

	/*!
		@brief Called when a seek command was issued
		@param absoluteTimestamp
	 */
	virtual bool SignalSeek(double &absoluteTimestamp);

	/*!
		@brief Called when a stop command was issued
	 */
	virtual bool SignalStop();

	/*!
		@brief This is called by the framework. The networking layer signaled the availability for sending data
	 */
	virtual void ReadyForSend();

protected:
	virtual bool BuildFrame(FileClass *pFile, MediaFrame &mediaFrame,
			IOBuffer &buffer) = 0;
	virtual bool FeedMetaData(FileClass *pFile, MediaFrame &mediaFrame) = 0;
private:
	/*!
		@brief This will seek to the specified point in time.
		@param absoluteTimestamp - the timestamp where we want to seek before start the feeding process
	 */
	bool InternalSeek(double &absoluteTimestamp);

public:
	/*!
		@brief This is the function that will actually do the feeding.
		@discussion It is called by the framework and it must deliver one frame at a time to all subscribers
	 */

	virtual bool Feed();
private:
	/*!
		@brief GetFile function will open a file and will cache it if is a regular file.
		@discussion If the file is mmap based file, it will NOT cache it
		ReleaseFile will do the opposite: It will close the file if the references
		count will reach 0. This always happens in case of mmap file
	 */
#ifdef HAS_MMAP
	static MmapFile* GetFile(string filePath, uint32_t windowSize);
	static void ReleaseFile(MmapFile *pFile);
#else
	static File* GetFile(string filePath, uint32_t windowSize);
	static void ReleaseFile(File *pFile);
#endif /* HAS_MMAP */

	/*!
		@brief This function will ensure that the codec packets are sent. Also it preserves the current timings and frame index
	 */
	bool SendCodecs();



};


#endif	/* _INFILE4HTTPSTREAM_H */

#endif /* HAS_PROTOCOL_AVHTTP */

