Index: sources/tests/src/varianttestssuite.cpp
===================================================================
--- sources/tests/src/varianttestssuite.cpp	(revision 745)
+++ sources/tests/src/varianttestssuite.cpp	(working copy)
@@ -1034,11 +1034,11 @@
 void VariantTestsSuite::test_SerializeDeserializeBin() {
 	Variant v;
 	InitV(v);
-	string vHash = "fb5284b667427dced79342643c6ab810";
+	string vHash = "244c9084a34e401524e9955a77e93427";
 
 	Variant vCompact = v;
 	vCompact.Compact();
-	string vCompactHash = "a6458861009cafb27c193acca416e044";
+	string vCompactHash = "b04aae1c6e90d2c45d917728e87e2b09";
 
 	string rawV;
 	TS_ASSERT(v.SerializeToBin(rawV));
@@ -1070,11 +1070,11 @@
 void VariantTestsSuite::test_SerializeDeserializeXml() {
 	Variant v;
 	InitV(v);
-	string vHash = "b7429921d677f16c8f6ac153e6a96c81";
+	string vHash = "773d80991cf4a67907a0d3f1cd2018da";
 
 	Variant vCompact = v;
 	vCompact.Compact();
-	string vCompactHash = "e9cf45e2a977d7a0c3809b295963179a";
+	string vCompactHash = "5d3ba0dca642332ae77eacf171b40f62";
 
 	string rawV;
 	TS_ASSERT(v.SerializeToXml(rawV));
@@ -1112,16 +1112,16 @@
 
 	Variant temp = v["44 array"];
 	v.RemoveKey("44 array");
-	v["44 array"]["__index__value__1"] = temp["__index__value__0"];
-	v["44 array"]["__index__value__2"] = temp["__index__value__1"];
-	v["44 array"]["__index__value__3"] = temp["__index__value__2"];
+	v["44 array"]["0x00000001"] = temp["0x00000000"];
+	v["44 array"]["0x00000002"] = temp["0x00000001"];
+	v["44 array"]["0x00000003"] = temp["0x00000002"];
 	v["44 array"].IsArray(true);
 
 	temp = v["47 map"]["44 array"];
 	v["47 map"].RemoveKey("44 array");
-	v["47 map"]["44 array"]["__index__value__1"] = temp["__index__value__0"];
-	v["47 map"]["44 array"]["__index__value__2"] = temp["__index__value__1"];
-	v["47 map"]["44 array"]["__index__value__3"] = temp["__index__value__2"];
+	v["47 map"]["44 array"]["0x00000001"] = temp["0x00000000"];
+	v["47 map"]["44 array"]["0x00000002"] = temp["0x00000001"];
+	v["47 map"]["44 array"]["0x00000003"] = temp["0x00000002"];
 	v["47 map"]["44 array"].IsArray(true);
 
 	string rawLua;
Index: sources/thelib/src/protocols/rtmp/amf0serializer.cpp
===================================================================
--- sources/thelib/src/protocols/rtmp/amf0serializer.cpp	(revision 744)
+++ sources/thelib/src/protocols/rtmp/amf0serializer.cpp	(working copy)
@@ -1,4 +1,4 @@
-/* 
+/*
  *  Copyright (c) 2010,
  *  Gavriloaie Eugen-Andrei (shiretu@gmail.com)
  *
@@ -254,8 +254,10 @@
 
 	FOR_MAP(temp, string, Variant, i) {
 		string key = MAP_KEY(i);
-		if (key.find(VAR_INDEX_VALUE) == 0) {
-			key = key.substr(VAR_INDEX_VALUE_LEN);
+		if ((key.length() == 10)
+				&& (key[0] = '0')
+				&& (key[1] = 'x')) {
+			key = format("%"PRIu32, (uint32_t) strtol(key.c_str(), NULL, 16));
 		}
 		if (!WriteShortString(buffer, key, false)) {
 			FATAL("Unable to serialize key");
@@ -383,8 +385,10 @@
 
 	FOR_MAP(temp, string, Variant, i) {
 		string key = MAP_KEY(i);
-		if (key.find(VAR_INDEX_VALUE) == 0) {
-			key = key.substr(VAR_INDEX_VALUE_LEN);
+		if ((key.length() == 10)
+				&& (key[0] = '0')
+				&& (key[1] = 'x')) {
+			key = format("%"PRIu32, (uint32_t) strtol(key.c_str(), NULL, 16));
 		}
 		if (!WriteShortString(buffer, key, false)) {
 			FATAL("Unable to serialize key");
Index: sources/common/include/utils/misc/variant.h
===================================================================
--- sources/common/include/utils/misc/variant.h	(revision 745)
+++ sources/common/include/utils/misc/variant.h	(working copy)
@@ -165,7 +165,6 @@
 
 	Variant & operator[](const string &key);
 	Variant & operator[](const char *key);
-	Variant & operator[](const double &key);
 	Variant & operator[](const uint32_t &key);
 	Variant & operator[](Variant &key);
 	Variant & GetValue(string key, bool caseSensitive);
Index: sources/common/include/defines.h
===================================================================
--- sources/common/include/defines.h	(revision 744)
+++ sources/common/include/defines.h	(working copy)
@@ -844,8 +844,6 @@
 #define VAR_ENUM_VALUE_UNDEFINED 2
 #define VAR_HOUR "hour"
 #define VAR_HOUR_LEN 4
-#define VAR_INDEX_VALUE "__index__value__"
-#define VAR_INDEX_VALUE_LEN 16
 #define VAR_ISDST "isdst"
 #define VAR_ISDST_LEN 5
 #define VAR_MAP_NAME "__map__name__"
Index: sources/common/src/utils/lua/luautils.cpp
===================================================================
--- sources/common/src/utils/lua/luautils.cpp	(revision 745)
+++ sources/common/src/utils/lua/luautils.cpp	(working copy)
@@ -295,18 +295,14 @@
 			}
 
 			FOR_MAP(variant, string, Variant, i) {
-				if (MAP_KEY(i).find(VAR_INDEX_VALUE) == 0) {
-					string temp = MAP_KEY(i).substr(VAR_INDEX_VALUE_LEN,
-							string::npos);
-					char *error = NULL;
-					double index = strtod(STR(temp), &error);
-					if (error == STR(temp) + temp.size()) {
-						lua_pushnumber(pLuaState, index);
-					} else {
-						lua_pushstring(pLuaState, STR(MAP_KEY(i)));
-					}
+				const char *pKey = MAP_KEY(i).c_str();
+				if ((MAP_KEY(i).length() == 10)
+						&& (pKey[0] == '0')
+						&& (pKey[1] == 'x')) {
+					uint32_t index = (uint32_t) strtol(pKey, NULL, 16);
+					lua_pushnumber(pLuaState, index);
 				} else {
-					lua_pushstring(pLuaState, STR(MAP_KEY(i)));
+					lua_pushstring(pLuaState, pKey);
 				}
 				if (!PushVariant(pLuaState, MAP_VAL(i), true)) {
 					FINEST("Unable to push primitive");
Index: sources/common/src/utils/misc/variant.cpp
===================================================================
--- sources/common/src/utils/misc/variant.cpp	(revision 745)
+++ sources/common/src/utils/misc/variant.cpp	(working copy)
@@ -691,54 +691,35 @@
 	return operator[](string(key));
 }
 
-Variant& Variant::operator[](const double &key) {
-	stringstream ss;
-	ss << VAR_INDEX_VALUE << key;
-	return operator[](ss.str());
-}
-
 Variant& Variant::operator[](const uint32_t &key) {
-	stringstream ss;
-	ss << VAR_INDEX_VALUE << key;
-	return operator[](ss.str());
+	char temp[11];
+	sprintf(temp, "0x%08"PRIx32, key);
+	return operator[](temp);
 }
 
 Variant& Variant::operator[](Variant &key) {
-	stringstream ss;
 	switch (key._type) {
-		case V_BOOL:
 		case V_INT8:
 		case V_INT16:
 		case V_INT32:
-		case V_INT64:
 		case V_UINT8:
 		case V_UINT16:
 		case V_UINT32:
-		case V_UINT64:
-		case V_DOUBLE:
 		{
-			ss << VAR_INDEX_VALUE << STR(key);
-			break;
+			char temp[11];
+			sprintf(temp, "0x%08"PRIx32, (uint32_t) key);
+			return operator[](temp);
 		}
 		case V_STRING:
 		{
-			ss << *key._value.s;
-			break;
+			return operator[](*key._value.s);
 		}
-		case V_NULL:
-		case V_UNDEFINED:
-		case V_DATE:
-		case V_TIME:
-		case V_TIMESTAMP:
-		case V_MAP:
-		case V_TYPED_MAP:
 		default:
 		{
 			ASSERT("Variant has invalid type to be used as an index: %s", STR(key.ToString()));
 			break;
 		}
 	}
-	return operator[](ss.str());
 }
 
 Variant &Variant::GetValue(string key, bool caseSensitive) {
@@ -965,7 +946,9 @@
 		ASSERT("RemoveKey failed: %s", STR(ToString()));
 		return;
 	}
-	_value.m->children.erase(format(VAR_INDEX_VALUE"%u", index));
+	char temp[11];
+	sprintf(temp, "0x%08"PRIx32, index);
+	_value.m->children.erase(temp);
 }
 
 void Variant::RemoveAllKeys() {
@@ -998,7 +981,9 @@
 
 	uint32_t denseCount = 0;
 	for (denseCount = 0; denseCount < MapSize(); denseCount++) {
-		if (!MAP_HAS1(_value.m->children, format(VAR_INDEX_VALUE"%u", denseCount)))
+		char temp[11];
+		sprintf(temp, "0x%08"PRIx32, denseCount);
+		if (!MAP_HAS1(_value.m->children, temp))
 			break;
 	}
 
Index: constants/constants.lua
===================================================================
--- constants/constants.lua	(revision 745)
+++ constants/constants.lua	(working copy)
@@ -499,7 +499,6 @@
 VAR_MIN="min",
 VAR_SEC="sec",
 VAR_ISDST="isdst",
-VAR_INDEX_VALUE="__index__value__",
 VAR_MAP_NAME="__map__name__",
 VAR_ENUM_VALUE_NULL=1,
 VAR_ENUM_VALUE_UNDEFINED=2,
